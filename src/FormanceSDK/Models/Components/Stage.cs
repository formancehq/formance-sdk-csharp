//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace FormanceSDK.Models.Components
{
    using FormanceSDK.Models.Components;
    using FormanceSDK.Utils;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    

    public class StageType
    {
        private StageType(string value) { Value = value; }

        public string Value { get; private set; }
        public static StageType StageSend { get { return new StageType("StageSend"); } }
        
        public static StageType StageDelay { get { return new StageType("StageDelay"); } }
        
        public static StageType StageWaitEvent { get { return new StageType("StageWaitEvent"); } }
        
        public static StageType Update { get { return new StageType("Update"); } }
        
        public static StageType Null { get { return new StageType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(StageType v) { return v.Value; }
        public static StageType FromString(string v) {
            switch(v) {
                case "StageSend": return StageSend;
                case "StageDelay": return StageDelay;
                case "StageWaitEvent": return StageWaitEvent;
                case "Update": return Update;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for StageType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((StageType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(Stage.StageConverter))]
    public class Stage {
        public Stage(StageType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public StageSend? StageSend { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public StageDelay? StageDelay { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public StageWaitEvent? StageWaitEvent { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public Update? Update { get; set; }

        public StageType Type { get; set; }


        public static Stage CreateStageSend(StageSend stageSend) {
            StageType typ = StageType.StageSend;

            Stage res = new Stage(typ);
            res.StageSend = stageSend;
            return res;
        }

        public static Stage CreateStageDelay(StageDelay stageDelay) {
            StageType typ = StageType.StageDelay;

            Stage res = new Stage(typ);
            res.StageDelay = stageDelay;
            return res;
        }

        public static Stage CreateStageWaitEvent(StageWaitEvent stageWaitEvent) {
            StageType typ = StageType.StageWaitEvent;

            Stage res = new Stage(typ);
            res.StageWaitEvent = stageWaitEvent;
            return res;
        }

        public static Stage CreateUpdate(Update update) {
            StageType typ = StageType.Update;

            Stage res = new Stage(typ);
            res.Update = update;
            return res;
        }

        public static Stage CreateNull() {
            StageType typ = StageType.Null;
            return new Stage(typ);
        }

        public class StageConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(Stage);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                var json = JRaw.Create(reader).ToString();
                if (json == "null")
                {
                    return null;
                }

                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new Stage(StageType.StageWaitEvent)
                    {
                        StageWaitEvent = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<StageWaitEvent>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(StageWaitEvent), new Stage(StageType.StageWaitEvent), "StageWaitEvent"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Stage(StageType.Update)
                    {
                        Update = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<Update>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(Update), new Stage(StageType.Update), "Update"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Stage(StageType.StageDelay)
                    {
                        StageDelay = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<StageDelay>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(StageDelay), new Stage(StageType.StageDelay), "StageDelay"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Stage(StageType.StageSend)
                    {
                        StageSend = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<StageSend>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(StageSend), new Stage(StageType.StageSend), "StageSend"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                Stage res = (Stage)value;
                if (StageType.FromString(res.Type).Equals(StageType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.StageSend != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.StageSend));
                    return;
                }
                if (res.StageDelay != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.StageDelay));
                    return;
                }
                if (res.StageWaitEvent != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.StageWaitEvent));
                    return;
                }
                if (res.Update != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Update));
                    return;
                }

            }

        }

    }
}