//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace FormanceSDK.Models.Components
{
    using FormanceSDK.Models.Components;
    using FormanceSDK.Utils;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;

    public class SubjectType
    {
        private SubjectType(string value) { Value = value; }

        public string Value { get; private set; }

        public static SubjectType Account { get { return new SubjectType("ACCOUNT"); } }

        public static SubjectType Wallet { get { return new SubjectType("WALLET"); } }

        public static SubjectType Null { get { return new SubjectType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(SubjectType v) { return v.Value; }
        public static SubjectType FromString(string v) {
            switch(v) {
                case "ACCOUNT": return Account;
                case "WALLET": return Wallet;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for SubjectType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((SubjectType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(Subject.SubjectConverter))]
    public class Subject
    {
        public Subject(SubjectType type)
        {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public LedgerAccountSubject? LedgerAccountSubject { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public WalletSubject? WalletSubject { get; set; }

        public SubjectType Type { get; set; }

        public static Subject CreateAccount(LedgerAccountSubject account)
        {
            SubjectType typ = SubjectType.Account;
            string typStr = SubjectType.Account.ToString();
            account.Type = typStr;
            Subject res = new Subject(typ);
            res.LedgerAccountSubject = account;
            return res;
        }

        public static Subject CreateWallet(WalletSubject wallet)
        {
            SubjectType typ = SubjectType.Wallet;
            string typStr = SubjectType.Wallet.ToString();
            wallet.Type = typStr;
            Subject res = new Subject(typ);
            res.WalletSubject = wallet;
            return res;
        }

        public static Subject CreateNull()
        {
            SubjectType typ = SubjectType.Null;
            return new Subject(typ);
        }

        public class SubjectConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(Subject);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                JObject jo = JObject.Load(reader);
                string discriminator = jo.GetValue("type")?.ToString() ?? throw new ArgumentNullException("Could not find discriminator field.");
                if (discriminator == SubjectType.Account.ToString())
                {
                    LedgerAccountSubject ledgerAccountSubject = ResponseBodyDeserializer.DeserializeNotNull<LedgerAccountSubject>(jo.ToString());
                    return CreateAccount(ledgerAccountSubject);
                }
                if (discriminator == SubjectType.Wallet.ToString())
                {
                    WalletSubject walletSubject = ResponseBodyDeserializer.DeserializeNotNull<WalletSubject>(jo.ToString());
                    return CreateWallet(walletSubject);
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }

                Subject res = (Subject)value;
                if (SubjectType.FromString(res.Type).Equals(SubjectType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }

                if (res.LedgerAccountSubject != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.LedgerAccountSubject));
                    return;
                }

                if (res.WalletSubject != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.WalletSubject));
                    return;
                }
            }

        }

    }
}