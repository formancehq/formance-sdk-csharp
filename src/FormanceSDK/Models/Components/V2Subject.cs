//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace FormanceSDK.Models.Components
{
    using FormanceSDK.Models.Components;
    using FormanceSDK.Utils;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    

    public class V2SubjectType
    {
        private V2SubjectType(string value) { Value = value; }

        public string Value { get; private set; }
        
        public static V2SubjectType Account { get { return new V2SubjectType("ACCOUNT"); } }
        public static V2SubjectType Wallet { get { return new V2SubjectType("WALLET"); } }
        public static V2SubjectType Null { get { return new V2SubjectType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(V2SubjectType v) { return v.Value; }
        public static V2SubjectType FromString(string v) {
            switch(v) {
                case "ACCOUNT": return Account;
                case "WALLET": return Wallet;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for V2SubjectType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((V2SubjectType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(V2Subject.V2SubjectConverter))]
    public class V2Subject {
        public V2Subject(V2SubjectType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public V2LedgerAccountSubject? V2LedgerAccountSubject { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public V2WalletSubject? V2WalletSubject { get; set; }

        public V2SubjectType Type { get; set; }


        public static V2Subject CreateAccount(V2LedgerAccountSubject account) {
            V2SubjectType typ = V2SubjectType.Account;
        
            string typStr = V2SubjectType.Account.ToString();
            
            account.Type = typStr;
            V2Subject res = new V2Subject(typ);
            res.V2LedgerAccountSubject = account;
            return res;
        }
        public static V2Subject CreateWallet(V2WalletSubject wallet) {
            V2SubjectType typ = V2SubjectType.Wallet;
        
            string typStr = V2SubjectType.Wallet.ToString();
            
            wallet.Type = typStr;
            V2Subject res = new V2Subject(typ);
            res.V2WalletSubject = wallet;
            return res;
        }
        public static V2Subject CreateNull() {
            V2SubjectType typ = V2SubjectType.Null;
            return new V2Subject(typ);
        }

        public class V2SubjectConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(V2Subject);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                JObject jo = JObject.Load(reader);
                string discriminator = jo.GetValue("type")?.ToString() ?? throw new ArgumentNullException("Could not find discriminator field.");
                if (discriminator == V2SubjectType.Account.ToString())
                {
                    V2LedgerAccountSubject? v2LedgerAccountSubject = ResponseBodyDeserializer.Deserialize<V2LedgerAccountSubject>(jo.ToString());
                    return CreateAccount(v2LedgerAccountSubject!);
                }
                if (discriminator == V2SubjectType.Wallet.ToString())
                {
                    V2WalletSubject? v2WalletSubject = ResponseBodyDeserializer.Deserialize<V2WalletSubject>(jo.ToString());
                    return CreateWallet(v2WalletSubject!);
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                V2Subject res = (V2Subject)value;
                if (V2SubjectType.FromString(res.Type).Equals(V2SubjectType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.V2LedgerAccountSubject != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.V2LedgerAccountSubject));
                    return;
                }
                if (res.V2WalletSubject != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.V2WalletSubject));
                    return;
                }

            }

        }

    }
}