//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace FormanceSDK.Models.Components
{
    using FormanceSDK.Models.Components;
    using FormanceSDK.Utils;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    

    public class V3ConnectorConfigType
    {
        private V3ConnectorConfigType(string value) { Value = value; }

        public string Value { get; private set; }
        
        public static V3ConnectorConfigType Adyen { get { return new V3ConnectorConfigType("Adyen"); } }
        public static V3ConnectorConfigType Atlar { get { return new V3ConnectorConfigType("Atlar"); } }
        public static V3ConnectorConfigType Bankingcircle { get { return new V3ConnectorConfigType("Bankingcircle"); } }
        public static V3ConnectorConfigType Currencycloud { get { return new V3ConnectorConfigType("Currencycloud"); } }
        public static V3ConnectorConfigType Dummypay { get { return new V3ConnectorConfigType("Dummypay"); } }
        public static V3ConnectorConfigType Generic { get { return new V3ConnectorConfigType("Generic"); } }
        public static V3ConnectorConfigType Mangopay { get { return new V3ConnectorConfigType("Mangopay"); } }
        public static V3ConnectorConfigType Modulr { get { return new V3ConnectorConfigType("Modulr"); } }
        public static V3ConnectorConfigType Moneycorp { get { return new V3ConnectorConfigType("Moneycorp"); } }
        public static V3ConnectorConfigType Stripe { get { return new V3ConnectorConfigType("Stripe"); } }
        public static V3ConnectorConfigType Wise { get { return new V3ConnectorConfigType("Wise"); } }
        public static V3ConnectorConfigType Null { get { return new V3ConnectorConfigType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(V3ConnectorConfigType v) { return v.Value; }
        public static V3ConnectorConfigType FromString(string v) {
            switch(v) {
                case "Adyen": return Adyen;
                case "Atlar": return Atlar;
                case "Bankingcircle": return Bankingcircle;
                case "Currencycloud": return Currencycloud;
                case "Dummypay": return Dummypay;
                case "Generic": return Generic;
                case "Mangopay": return Mangopay;
                case "Modulr": return Modulr;
                case "Moneycorp": return Moneycorp;
                case "Stripe": return Stripe;
                case "Wise": return Wise;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for V3ConnectorConfigType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((V3ConnectorConfigType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(V3ConnectorConfig.V3ConnectorConfigConverter))]
    public class V3ConnectorConfig {
        public V3ConnectorConfig(V3ConnectorConfigType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public V3AdyenConfig? V3AdyenConfig { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public V3AtlarConfig? V3AtlarConfig { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public V3BankingcircleConfig? V3BankingcircleConfig { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public V3CurrencycloudConfig? V3CurrencycloudConfig { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public V3DummypayConfig? V3DummypayConfig { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public V3GenericConfig? V3GenericConfig { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public V3MangopayConfig? V3MangopayConfig { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public V3ModulrConfig? V3ModulrConfig { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public V3MoneycorpConfig? V3MoneycorpConfig { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public V3StripeConfig? V3StripeConfig { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public V3WiseConfig? V3WiseConfig { get; set; }

        public V3ConnectorConfigType Type { get; set; }


        public static V3ConnectorConfig CreateAdyen(V3AdyenConfig adyen) {
            V3ConnectorConfigType typ = V3ConnectorConfigType.Adyen;
        
            string typStr = V3ConnectorConfigType.Adyen.ToString();
            
            adyen.Provider = typStr;
            V3ConnectorConfig res = new V3ConnectorConfig(typ);
            res.V3AdyenConfig = adyen;
            return res;
        }
        public static V3ConnectorConfig CreateAtlar(V3AtlarConfig atlar) {
            V3ConnectorConfigType typ = V3ConnectorConfigType.Atlar;
        
            string typStr = V3ConnectorConfigType.Atlar.ToString();
            
            atlar.Provider = typStr;
            V3ConnectorConfig res = new V3ConnectorConfig(typ);
            res.V3AtlarConfig = atlar;
            return res;
        }
        public static V3ConnectorConfig CreateBankingcircle(V3BankingcircleConfig bankingcircle) {
            V3ConnectorConfigType typ = V3ConnectorConfigType.Bankingcircle;
        
            string typStr = V3ConnectorConfigType.Bankingcircle.ToString();
            
            bankingcircle.Provider = typStr;
            V3ConnectorConfig res = new V3ConnectorConfig(typ);
            res.V3BankingcircleConfig = bankingcircle;
            return res;
        }
        public static V3ConnectorConfig CreateCurrencycloud(V3CurrencycloudConfig currencycloud) {
            V3ConnectorConfigType typ = V3ConnectorConfigType.Currencycloud;
        
            string typStr = V3ConnectorConfigType.Currencycloud.ToString();
            
            currencycloud.Provider = typStr;
            V3ConnectorConfig res = new V3ConnectorConfig(typ);
            res.V3CurrencycloudConfig = currencycloud;
            return res;
        }
        public static V3ConnectorConfig CreateDummypay(V3DummypayConfig dummypay) {
            V3ConnectorConfigType typ = V3ConnectorConfigType.Dummypay;
        
            string typStr = V3ConnectorConfigType.Dummypay.ToString();
            
            dummypay.Provider = typStr;
            V3ConnectorConfig res = new V3ConnectorConfig(typ);
            res.V3DummypayConfig = dummypay;
            return res;
        }
        public static V3ConnectorConfig CreateGeneric(V3GenericConfig generic) {
            V3ConnectorConfigType typ = V3ConnectorConfigType.Generic;
        
            string typStr = V3ConnectorConfigType.Generic.ToString();
            
            generic.Provider = typStr;
            V3ConnectorConfig res = new V3ConnectorConfig(typ);
            res.V3GenericConfig = generic;
            return res;
        }
        public static V3ConnectorConfig CreateMangopay(V3MangopayConfig mangopay) {
            V3ConnectorConfigType typ = V3ConnectorConfigType.Mangopay;
        
            string typStr = V3ConnectorConfigType.Mangopay.ToString();
            
            mangopay.Provider = typStr;
            V3ConnectorConfig res = new V3ConnectorConfig(typ);
            res.V3MangopayConfig = mangopay;
            return res;
        }
        public static V3ConnectorConfig CreateModulr(V3ModulrConfig modulr) {
            V3ConnectorConfigType typ = V3ConnectorConfigType.Modulr;
        
            string typStr = V3ConnectorConfigType.Modulr.ToString();
            
            modulr.Provider = typStr;
            V3ConnectorConfig res = new V3ConnectorConfig(typ);
            res.V3ModulrConfig = modulr;
            return res;
        }
        public static V3ConnectorConfig CreateMoneycorp(V3MoneycorpConfig moneycorp) {
            V3ConnectorConfigType typ = V3ConnectorConfigType.Moneycorp;
        
            string typStr = V3ConnectorConfigType.Moneycorp.ToString();
            
            moneycorp.Provider = typStr;
            V3ConnectorConfig res = new V3ConnectorConfig(typ);
            res.V3MoneycorpConfig = moneycorp;
            return res;
        }
        public static V3ConnectorConfig CreateStripe(V3StripeConfig stripe) {
            V3ConnectorConfigType typ = V3ConnectorConfigType.Stripe;
        
            string typStr = V3ConnectorConfigType.Stripe.ToString();
            
            stripe.Provider = typStr;
            V3ConnectorConfig res = new V3ConnectorConfig(typ);
            res.V3StripeConfig = stripe;
            return res;
        }
        public static V3ConnectorConfig CreateWise(V3WiseConfig wise) {
            V3ConnectorConfigType typ = V3ConnectorConfigType.Wise;
        
            string typStr = V3ConnectorConfigType.Wise.ToString();
            
            wise.Provider = typStr;
            V3ConnectorConfig res = new V3ConnectorConfig(typ);
            res.V3WiseConfig = wise;
            return res;
        }
        public static V3ConnectorConfig CreateNull() {
            V3ConnectorConfigType typ = V3ConnectorConfigType.Null;
            return new V3ConnectorConfig(typ);
        }

        public class V3ConnectorConfigConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(V3ConnectorConfig);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                JObject jo = JObject.Load(reader);
                string discriminator = jo.GetValue("provider")?.ToString() ?? throw new ArgumentNullException("Could not find discriminator field.");
                if (discriminator == V3ConnectorConfigType.Adyen.ToString())
                {
                    V3AdyenConfig? v3AdyenConfig = ResponseBodyDeserializer.Deserialize<V3AdyenConfig>(jo.ToString());
                    return CreateAdyen(v3AdyenConfig!);
                }
                if (discriminator == V3ConnectorConfigType.Atlar.ToString())
                {
                    V3AtlarConfig? v3AtlarConfig = ResponseBodyDeserializer.Deserialize<V3AtlarConfig>(jo.ToString());
                    return CreateAtlar(v3AtlarConfig!);
                }
                if (discriminator == V3ConnectorConfigType.Bankingcircle.ToString())
                {
                    V3BankingcircleConfig? v3BankingcircleConfig = ResponseBodyDeserializer.Deserialize<V3BankingcircleConfig>(jo.ToString());
                    return CreateBankingcircle(v3BankingcircleConfig!);
                }
                if (discriminator == V3ConnectorConfigType.Currencycloud.ToString())
                {
                    V3CurrencycloudConfig? v3CurrencycloudConfig = ResponseBodyDeserializer.Deserialize<V3CurrencycloudConfig>(jo.ToString());
                    return CreateCurrencycloud(v3CurrencycloudConfig!);
                }
                if (discriminator == V3ConnectorConfigType.Dummypay.ToString())
                {
                    V3DummypayConfig? v3DummypayConfig = ResponseBodyDeserializer.Deserialize<V3DummypayConfig>(jo.ToString());
                    return CreateDummypay(v3DummypayConfig!);
                }
                if (discriminator == V3ConnectorConfigType.Generic.ToString())
                {
                    V3GenericConfig? v3GenericConfig = ResponseBodyDeserializer.Deserialize<V3GenericConfig>(jo.ToString());
                    return CreateGeneric(v3GenericConfig!);
                }
                if (discriminator == V3ConnectorConfigType.Mangopay.ToString())
                {
                    V3MangopayConfig? v3MangopayConfig = ResponseBodyDeserializer.Deserialize<V3MangopayConfig>(jo.ToString());
                    return CreateMangopay(v3MangopayConfig!);
                }
                if (discriminator == V3ConnectorConfigType.Modulr.ToString())
                {
                    V3ModulrConfig? v3ModulrConfig = ResponseBodyDeserializer.Deserialize<V3ModulrConfig>(jo.ToString());
                    return CreateModulr(v3ModulrConfig!);
                }
                if (discriminator == V3ConnectorConfigType.Moneycorp.ToString())
                {
                    V3MoneycorpConfig? v3MoneycorpConfig = ResponseBodyDeserializer.Deserialize<V3MoneycorpConfig>(jo.ToString());
                    return CreateMoneycorp(v3MoneycorpConfig!);
                }
                if (discriminator == V3ConnectorConfigType.Stripe.ToString())
                {
                    V3StripeConfig? v3StripeConfig = ResponseBodyDeserializer.Deserialize<V3StripeConfig>(jo.ToString());
                    return CreateStripe(v3StripeConfig!);
                }
                if (discriminator == V3ConnectorConfigType.Wise.ToString())
                {
                    V3WiseConfig? v3WiseConfig = ResponseBodyDeserializer.Deserialize<V3WiseConfig>(jo.ToString());
                    return CreateWise(v3WiseConfig!);
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                V3ConnectorConfig res = (V3ConnectorConfig)value;
                if (V3ConnectorConfigType.FromString(res.Type).Equals(V3ConnectorConfigType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.V3AdyenConfig != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.V3AdyenConfig));
                    return;
                }
                if (res.V3AtlarConfig != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.V3AtlarConfig));
                    return;
                }
                if (res.V3BankingcircleConfig != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.V3BankingcircleConfig));
                    return;
                }
                if (res.V3CurrencycloudConfig != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.V3CurrencycloudConfig));
                    return;
                }
                if (res.V3DummypayConfig != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.V3DummypayConfig));
                    return;
                }
                if (res.V3GenericConfig != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.V3GenericConfig));
                    return;
                }
                if (res.V3MangopayConfig != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.V3MangopayConfig));
                    return;
                }
                if (res.V3ModulrConfig != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.V3ModulrConfig));
                    return;
                }
                if (res.V3MoneycorpConfig != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.V3MoneycorpConfig));
                    return;
                }
                if (res.V3StripeConfig != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.V3StripeConfig));
                    return;
                }
                if (res.V3WiseConfig != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.V3WiseConfig));
                    return;
                }

            }

        }

    }
}