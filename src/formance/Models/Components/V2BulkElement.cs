//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace formance.Models.Components
{
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    using System;
    using formance.Models.Components;
    using formance.Utils;
    

    public class V2BulkElementType
    {
        private V2BulkElementType(string value) { Value = value; }

        public string Value { get; private set; }
        
        public static V2BulkElementType CreateTransaction { get { return new V2BulkElementType("CREATE_TRANSACTION"); } }
        public static V2BulkElementType AddMetadata { get { return new V2BulkElementType("ADD_METADATA"); } }
        public static V2BulkElementType RevertTransaction { get { return new V2BulkElementType("REVERT_TRANSACTION"); } }
        public static V2BulkElementType DeleteMetadata { get { return new V2BulkElementType("DELETE_METADATA"); } }
        public static V2BulkElementType Null { get { return new V2BulkElementType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(V2BulkElementType v) { return v.Value; }
        public static V2BulkElementType FromString(string v) {
            switch(v) {
                case "CREATE_TRANSACTION": return CreateTransaction;
                case "ADD_METADATA": return AddMetadata;
                case "REVERT_TRANSACTION": return RevertTransaction;
                case "DELETE_METADATA": return DeleteMetadata;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for V2BulkElementType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((V2BulkElementType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(V2BulkElement.V2BulkElementConverter))]
    public class V2BulkElement {
        public V2BulkElement(V2BulkElementType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public V2BulkElementCreateTransaction? V2BulkElementCreateTransaction { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public V2BulkElementAddMetadata? V2BulkElementAddMetadata { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public V2BulkElementRevertTransaction? V2BulkElementRevertTransaction { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public V2BulkElementDeleteMetadata? V2BulkElementDeleteMetadata { get; set; }

        public V2BulkElementType Type { get; set; }


        public static V2BulkElement CreateCreateTransaction(V2BulkElementCreateTransaction createTransaction) {
            V2BulkElementType typ = V2BulkElementType.CreateTransaction;
        
            string typStr = V2BulkElementType.CreateTransaction.ToString();
            
            createTransaction.Action = typStr;
            V2BulkElement res = new V2BulkElement(typ);
            res.V2BulkElementCreateTransaction = createTransaction;
            return res;
        }
        public static V2BulkElement CreateAddMetadata(V2BulkElementAddMetadata addMetadata) {
            V2BulkElementType typ = V2BulkElementType.AddMetadata;
        
            string typStr = V2BulkElementType.AddMetadata.ToString();
            
            addMetadata.Action = typStr;
            V2BulkElement res = new V2BulkElement(typ);
            res.V2BulkElementAddMetadata = addMetadata;
            return res;
        }
        public static V2BulkElement CreateRevertTransaction(V2BulkElementRevertTransaction revertTransaction) {
            V2BulkElementType typ = V2BulkElementType.RevertTransaction;
        
            string typStr = V2BulkElementType.RevertTransaction.ToString();
            
            revertTransaction.Action = typStr;
            V2BulkElement res = new V2BulkElement(typ);
            res.V2BulkElementRevertTransaction = revertTransaction;
            return res;
        }
        public static V2BulkElement CreateDeleteMetadata(V2BulkElementDeleteMetadata deleteMetadata) {
            V2BulkElementType typ = V2BulkElementType.DeleteMetadata;
        
            string typStr = V2BulkElementType.DeleteMetadata.ToString();
            
            deleteMetadata.Action = typStr;
            V2BulkElement res = new V2BulkElement(typ);
            res.V2BulkElementDeleteMetadata = deleteMetadata;
            return res;
        }
        public static V2BulkElement CreateNull() {
            V2BulkElementType typ = V2BulkElementType.Null;
            return new V2BulkElement(typ);
        }

        public class V2BulkElementConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(V2BulkElement);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                JObject jo = JObject.Load(reader);
                string discriminator = jo.GetValue("action")?.ToString() ?? throw new ArgumentNullException("Could not find discriminator field.");
                if (discriminator == V2BulkElementType.CreateTransaction.ToString())
                {
                    V2BulkElementCreateTransaction? v2BulkElementCreateTransaction = ResponseBodyDeserializer.Deserialize<V2BulkElementCreateTransaction>(jo.ToString());
                    return CreateCreateTransaction(v2BulkElementCreateTransaction!);
                }
                if (discriminator == V2BulkElementType.AddMetadata.ToString())
                {
                    V2BulkElementAddMetadata? v2BulkElementAddMetadata = ResponseBodyDeserializer.Deserialize<V2BulkElementAddMetadata>(jo.ToString());
                    return CreateAddMetadata(v2BulkElementAddMetadata!);
                }
                if (discriminator == V2BulkElementType.RevertTransaction.ToString())
                {
                    V2BulkElementRevertTransaction? v2BulkElementRevertTransaction = ResponseBodyDeserializer.Deserialize<V2BulkElementRevertTransaction>(jo.ToString());
                    return CreateRevertTransaction(v2BulkElementRevertTransaction!);
                }
                if (discriminator == V2BulkElementType.DeleteMetadata.ToString())
                {
                    V2BulkElementDeleteMetadata? v2BulkElementDeleteMetadata = ResponseBodyDeserializer.Deserialize<V2BulkElementDeleteMetadata>(jo.ToString());
                    return CreateDeleteMetadata(v2BulkElementDeleteMetadata!);
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                V2BulkElement res = (V2BulkElement)value;
                if (V2BulkElementType.FromString(res.Type).Equals(V2BulkElementType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.V2BulkElementCreateTransaction != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.V2BulkElementCreateTransaction));
                    return;
                }
                if (res.V2BulkElementAddMetadata != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.V2BulkElementAddMetadata));
                    return;
                }
                if (res.V2BulkElementRevertTransaction != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.V2BulkElementRevertTransaction));
                    return;
                }
                if (res.V2BulkElementDeleteMetadata != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.V2BulkElementDeleteMetadata));
                    return;
                }

            }

        }

    }
}